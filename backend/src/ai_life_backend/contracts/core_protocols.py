"""Core protocol definitions for HTTP error handling and RFC 7807 Problem Details."""

from __future__ import annotations

from collections.abc import Callable, Mapping
from datetime import datetime
from typing import Any, Protocol, TypedDict, runtime_checkable

RFC7807_MIME: str = "application/problem+json"
"""
Canonical media type for Problem Details (RFC 7807).
"""


class ProblemDict(TypedDict, total=False):
    """RFC 7807 Problem Details JSON object shape.

    Optional keys are allowed. Additional vendor-specific keys are permitted at runtime,
    but are not represented here for static typing simplicity.
    """

    type: str  # URI reference that identifies the problem type
    title: str  # Short, human-readable summary of the problem type
    status: int  # HTTP status code generated by the origin server
    detail: str  # Human-readable explanation specific to this occurrence
    instance: str  # URI reference that identifies the specific occurrence


# A clock hook to produce timezone-aware UTC time (used by modules/tests).
UtcNowCallable = Callable[[], datetime]


@runtime_checkable
class ProblemBuilder(Protocol):
    """Build a Problem Details mapping suitable for JSON serialization.

    Implementations SHOULD return a plain dict[str, Any] that matches ProblemDict
    and MAY include vendor-specific extension members.
    """

    def __call__(
        self,
        *,
        title: str,
        status: int,
        detail: str | None = None,
        type: str | None = None,
        instance: str | None = None,
    ) -> Mapping[str, Any]:
        """Build a Problem Details mapping from the provided fields."""
        ...


@runtime_checkable
class HttpErrorFactory(Protocol):
    """Create/raise exceptions that produce RFC 7807 Problem responses.

    Creates or raises an exception that, when handled by the web layer, produces an
    `application/problem+json` response with the given fields.

    Implementations MAY raise the exception or return an Exception instance for the
    caller to raise; both patterns are acceptable for this protocol.
    """

    def __call__(
        self,
        *,
        title: str,
        status: int = 400,
        detail: str | None = None,
        type: str | None = None,
        instance: str | None = None,
    ) -> Exception:
        """Create an HTTP error exception with the provided fields."""
        ...


__all__ = [
    "RFC7807_MIME",
    "HttpErrorFactory",
    "ProblemBuilder",
    "ProblemDict",
    "UtcNowCallable",
]
